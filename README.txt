Projet : IA G√©n√©tique pour Jeu Vid√©o 2D

Ce projet impl√©mente une Intelligence Artificielle (IA) bas√©e sur un algorithme g√©n√©tique utilisant la librairie NEAT (NeuroEvolution of Augmenting Topologies).
L'objectif est de permettre √† une IA d'apprendre √† jouer √† un jeu 2D en s'am√©liorant de g√©n√©ration en g√©n√©ration gr√¢ce √† un processus √©volutif.

üõ†Ô∏è Environnement requis

    Python : version 3.10 ou sup√©rieure

üì¶ D√©pendances :

    Pygame : pour g√©rer la structure et les interactions dans le jeu.
    NEAT-Python : pour l'√©volution g√©n√©tique des r√©seaux de neurones.

Installez les d√©pendances via :

    pip install pygame neat-python

üìÇ Structure du projet

    .
    |-- assets/               # Dossier contenant les fichiers et ressources du jeu (images, arri√®re-plans, etc.)
    |-- second.py             # Script principal o√π l'algorithme g√©n√©tique est impl√©ment√©
    |-- config-neat.txt       # Fichier de configuration pour NEAT (param√®tres g√©n√©tiques et r√©seau)

üöÄ Fonctionnalit√©s principales

    D√©finition des classes du jeu :
    Utilisation de Pygame pour mod√©liser les entit√©s du jeu (joueur, objets, environnements).

    Classe Game :
    Fournit un environnement simul√© o√π les g√©nomes peuvent √™tre √©valu√©s.

    √âvaluation d'un g√©nome (eval_genom) :
        Chaque g√©nome est test√© dans une instance du jeu.
        Le score (fitness) est attribu√© en fonction des performances du g√©nome (collecte d'objets, √©vitement des obstacles, progression dans le niveau).

    √âvaluation d'une population (eval_genomes) :
        Tous les g√©nomes d'une g√©n√©ration sont √©valu√©s.
        Utilisation de multiprocessing pour acc√©l√©rer l'√©valuation en parall√®le.

    Entra√Ænement et √©volution (run_neat) :
        Initialisation d'une population de g√©nomes.
        Entra√Ænement sur plusieurs g√©n√©rations.
        Sauvegarde du meilleur g√©nome sous forme d'un fichier pickle (winner.pkl).

    Test du g√©nome gagnant :
        Permet de charger et tester le g√©nome ayant obtenu le meilleur score apr√®s l'entra√Ænement.

‚öôÔ∏è Utilisation :

1Ô∏è‚É£ Configuration de NEAT

    Ajustez les param√®tres g√©n√©tiques dans le fichier config-neat.txt (nombre de neurones, mutations, stagnation, etc.).

2Ô∏è‚É£ Lancer l'entra√Ænement

Ex√©cutez le script principal pour d√©marrer l'entra√Ænement de l'IA :

python second.py

3Ô∏è‚É£ Tester le g√©nome gagnant

Une fois l'entra√Ænement termin√©, le g√©nome gagnant est sauvegard√© dans winner.pkl. Chargez ce g√©nome pour observer ses performances dans le jeu.
üìà Optimisation du Fitness

Le score (fitness) de chaque g√©nome est calcul√© en fonction :

    Des objets collect√©s (exemple : pommes).
    Du niveau atteint (progresser dans le jeu augmente la fitness).
    Des erreurs commises (chutes ou collisions r√©duisent la fitness).

üñºÔ∏è Am√©liorations possibles

    Utiliser les niveaux g√©n√©r√© al√©atoirement en y ajoutant des obstacles pour enrichir l'apprentissage de l'IA.
    Ajuster les param√®tres de mutation et croisement pour am√©liorer l'√©volution.
    Visualiser en temps r√©el les d√©cisions de l'IA (debugging).

üß† Inspiration

Ce projet d√©montre comment utiliser un algorithme g√©n√©tique pour entra√Æner une IA √† jouer √† un jeu simple.
NEAT est particuli√®rement puissant pour concevoir des r√©seaux de neurones capables d'apprendre des t√¢ches complexes de mani√®re autonome.

    